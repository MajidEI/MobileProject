package ma.ensa.drugstore.activity;import ma.ensa.drugstore.R;import ma.ensa.drugstore.adapter.HomeAdapter;import ma.ensa.drugstore.database.Database;import android.app.DatePickerDialog;import android.content.Intent;import android.support.v7.app.AppCompatActivity;import android.os.Bundle;import android.view.KeyEvent;import android.view.MenuItem;import android.view.View;import android.view.animation.AlphaAnimation;import android.widget.DatePicker;import android.widget.ImageView;import android.widget.TextView;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.RecyclerView;import android.support.v7.widget.Toolbar;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Calendar;import java.util.Date;import android.support.annotation.NonNull;import android.support.constraint.ConstraintLayout;import android.support.design.widget.BottomNavigationView;import android.support.v4.app.Fragment;import de.hdodenhof.circleimageview.CircleImageView;import ma.ensa.drugstore.fragment.HomeFragment;import ma.ensa.drugstore.fragment.MedsFragment;import ma.ensa.drugstore.model.HomeResult;public class MainActivity extends AppCompatActivity implements BottomNavigationView.OnNavigationItemSelectedListener {    int year,month,day;    Calendar calendar;    BottomNavigationView navigation;    Toolbar toolbar;    private ArrayList<String> medName = new ArrayList<String>();    private ArrayList<Integer> medPhoto = new ArrayList<Integer>();    private ArrayList<String> medTime = new ArrayList<String>();    TextView selectDate,homeName,lblmedTime,searchinp,lblArrow;    CircleImageView medHome;    DatePickerDialog datePickerDialog;    ImageView imgSelectDate;    private RecyclerView recyclerView;    private HomeAdapter adapter;    private RecyclerView.LayoutManager layoutManager;    public static String[] months = {"Jan", "Feb","Mar", "Apr", "May", "Jun", "Jul","Aug", "Sep", "Oct", "Nov","Dec"};    Database db;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        ConstraintLayout layout =  findViewById(R.id.container);        AlphaAnimation animation = new AlphaAnimation(0.0f , 1.0f ) ;        animation.setFillAfter(true);        animation.setDuration(1200);        layout.startAnimation(animation);        loadFragment(new HomeFragment());        navigation = findViewById(R.id.bottom_navigation);        toolbar = findViewById(R.id.toolbar);        selectDate = findViewById(R.id.btnDate);        lblmedTime = findViewById(R.id.txtTimeHome);        imgSelectDate = findViewById(R.id.imgSelectDate);        lblArrow = findViewById(R.id.txtArrow);        searchinp = findViewById(R.id.searchinput);        setSupportActionBar(toolbar);        homeName = findViewById(R.id.txMedHomeName);        medHome = findViewById(R.id.imgMedHome);        Date date = Calendar.getInstance().getTime();        SimpleDateFormat formatter = new SimpleDateFormat("yyyy/MM/dd");        initPillList(formatter.format(date));        recyclerView = findViewById(R.id.recycler_view_home);        adapter = new HomeAdapter(MainActivity.this, medPhoto, medName, medTime);        recyclerView.setAdapter(adapter);        layoutManager = new LinearLayoutManager(MainActivity.this);        recyclerView.setLayoutManager(layoutManager);        if(medName.isEmpty()) {            lblArrow.setVisibility(View.VISIBLE);        }        navigation.setOnNavigationItemSelectedListener(this);        selectDate.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                selectDate();            }        });        imgSelectDate.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                selectDate();            }        });        searchinp.setOnKeyListener(new View.OnKeyListener() {            @Override            public boolean onKey(View v, int keyCode, KeyEvent event) {                searchMeds();                return false;            }        });    }    @Override    public void onResume() {        super.onResume();    }    public void searchMeds(){        String tmp = searchinp.getText().toString();        System.out.println(tmp);        medName.clear();        medTime.clear();        medPhoto.clear();        try {            db = new Database(this);            ArrayList<HomeResult> homeResults = new ArrayList<HomeResult>();            if(tmp.isEmpty()){                homeResults = db.getPills();            }else{                homeResults = db.getPillsByName(tmp);            }            System.out.println("tmp = "+tmp);            for (HomeResult pill : homeResults) {                if(pill.getFrequency().equals("Everyday")) {                    System.out.println(pill.getMedName());                    medName.add(pill.getMedName());                    medPhoto.add(pill.getPhotoId());                    medTime.add(pill.getTime());                }            }            recyclerView.setAdapter(adapter);            recyclerView.setLayoutManager(layoutManager);            db.close();        } catch (Exception e) {            System.err.println(e);        }    }    public void selectDate() {        calendar = Calendar.getInstance();        year = calendar.get(Calendar.YEAR);        month = calendar.get(Calendar.MONTH);        day = calendar.get(Calendar.DAY_OF_MONTH);        datePickerDialog = new DatePickerDialog(MainActivity.this,                new DatePickerDialog.OnDateSetListener() {                    @Override                    public void onDateSet(DatePicker datePicker, int year, int month, int day) {                        selectDate.setText(months[month] + " " + day);                        String date = year + "/" + (month+1) + "/" + day;                        initPillList(date);                    }                }, year, month, day);        datePickerDialog.show();    }    @Override    public boolean onNavigationItemSelected(@NonNull MenuItem item) {        Fragment fragment = null;        switch (item.getItemId()) {            case R.id.navigation_home:                fragment = new HomeFragment();                recyclerView.setVisibility(View.VISIBLE);                break;            case R.id.navigation_pillbox:                fragment = new MedsFragment();                recyclerView.setVisibility(View.GONE);                break;            case R.id.navigation_add:                Intent intent = new Intent(MainActivity.this, AddMedicament.class);                startActivity(intent);                break;        }        return loadFragment(fragment);    }    private boolean loadFragment(Fragment fragment) {        if (fragment != null) {            getSupportFragmentManager()                    .beginTransaction()                    .replace(R.id.fragment_container, fragment)                    .commit();            return true;        }        return false;    }    public void initPillList(String date){        medName.clear();        medTime.clear();        medPhoto.clear();        try {            db = new Database(this);            ArrayList<HomeResult> homeResults = db.getPills();            for (HomeResult pill : homeResults) {                if(pill.getFrequency().equals("Everyday")) {                    medName.add(pill.getMedName());                    medPhoto.add(pill.getPhotoId());                    medTime.add(pill.getTime());                }            }            db.close();        } catch (Exception e) {            System.err.println(e);        }    }}